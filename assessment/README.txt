Data science and machine learning assessment - Automating Calcium assay data analysis â€“ Iwan Williams


Introduction/motivation

My lab has been sitting on data from a series of calcium signalling experiments for years (since around 2018), 
that proved too laborious to analyse. I these cells were treated with ionomycin which releases ER from the
endoplasmic reticulum. One of the major intracellular calcium stores along with the lysosome. They were interested
in the cell's response to the increased cytoplasmic calcium levels, as calcium homeostasis dysregulation is a known
feature of many neurodegenerative diseases. Experements were carried out on 25 diseases and 5 wild type cell lines.
The output of these experements is a large number of spreadsheets of calcium levels (as determined by
fluorescence and microscopy) and a timescale. Each dataset contains data from a number of cells but is restricted to
one cell type. When plotted, the data has a general pattern as seen in the following link:

https://github.com/U1711/calcium_project/blob/main/assessment/example_plot_annotated.png

Each graph begins with incline due to ionomycin treatment, followed by a lag period where levels begin to
decline but the cellular response is still generating. This is followed by the primary decline which is what we're
most interested in, which ends with a slow plateau to a trough.


Methods.

To identify the primary decline I decided to use a function that identifies a consecutive series of points in the
data that have a similar gradient, forming the longest straight(ish) line. The function works through all the
points in the graph and compares the gradient of consecutive points, if the following point's gradient falls within
a specific tolerance then it is added to the line. If the tolerance test fails the line is ended and the next one
begins. The longest line throughout the data is then identified. I decided that I could use this to fit a line to
my primary decline, but it took some modifying.

First I had to define the tolerance, and after trialling a range of different methods I decided that the consecutive
point must not put off the gradient of the overall line by a set percentage. After some trial and error I chose 0.3
as this value, but this can be editied on a cell by cell basis. The second modification was that I ensured that the
line was negative, to ensure that I identified the decline, not the incline. 

Once I started running the code on datasets I noticed that the varying calcium levels between cells caused a large
amount of differnce in the gradients. To account for this I standardised the calcium level data by dividing each
cell's values by the peak value in that set. This means that all data was standardised to a 0-1 scale. 

A second function calculates the gradient of the lines plotted in each cell, as well as an overall average gradient
for the cell type.


Results.

I found that this code consistently identified the region of interest in our data and therefore calculated accurate
gradients. This will allow us to interpret the mass amounts of data generated by these experiments in a vastly
shorter time frame.


Summary/Conclusion.

While I am pleased with the outcome of this project there are some shortcomings that I feel could be improved with
further development. As there is no way to verify how well the line fits the primary decline the code must be
supervised, I would like to develop either a better method to identify the primary decline, or a way to verify the
accuracy of the line once generated with the method stated above. This would reduce the supervision requirement and
further decrease the amount of time required to conduct the analysis. A further problem is that, while the plots are
consistent enough to generate a gradient for the primary decline, they do not always span the whole length of the
decline. If the line more accurately spanned the whole of the primary decline it would be useful to calculate the
area under the line


To run:

1 - Open calcium_with_assessment_annotation.ipynb file in a jupyter notebook browser.
	From: 	From: https://github.com/U1711/calcium_project/tree/main/assessment
2 - Insert the URL of data to test.
	Example data - 'https://github.com/U1711/calcium_project/blob/main/assessment/Fucosidosis%20A%2013032018.csv'
3 - Run through data in order and follow annotations.
	One point requires going back and running a previous cell, but this is specified in annotation.


Thank you for reading my README. I would like to acknowledge that this project would not have been possible without
a number of online resources which helped introduce me to coding in Python. A number of the ideas for this project
as well as a great amount of help with errors came from these public resources, including kaggle and Open AI GPT.

The graph linked was produced in Biorender.

Background information: Lloyd-Evans E. Acidic Ca2+ stores in neurodegeneration. Messenger (Los Angel).
				2016 Jun 1;5(1-2):37-55. doi: 10.1166/msr.2016.1054. PMID: 28593104; PMCID: PMC5458140.